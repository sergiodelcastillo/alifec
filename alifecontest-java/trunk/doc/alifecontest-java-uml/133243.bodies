class Tournament
!!!175227.java!!!	Tournament(in n : String, in path : String, in mode : int)
		NAME = n;
      battleManager = new BattleManager(path+ File.separator+ NAME, mode);
      colonies = new Vector<String>();
!!!175355.java!!!	getMaxEnergy() : float
		 return battleManager.getMaxEnergy();
!!!175483.java!!!	size() : int
		return getNames().size();
!!!175611.java!!!	addColony(in c : String) : void
        if(!colonies.contains(c))
            colonies.addElement(c);
!!!175739.java!!!	add(in n1 : String, in n2 : String, in nut : String, in ene1 : float, in ene2 : float) : boolean
        try {
            battleManager.add(n1, n2, nut, ene1, ene2);
        } catch (FileNotFoundException ex) {
				System.out.println("FileNotFoundException ---> Tournament.add()");
            //Logger.getLogger(Tournament.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } catch (IOException ex) {
				System.out.println("IOException ---> Tournament.add()");
//            Logger.getLogger(Tournament.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        return true;
!!!175867.java!!!	penalice(in name : String) : boolean
      return battleManager.penalice(name) && colonies.remove(name);
!!!175995.java!!!	delete(in name : String) : boolean
		battleManager.delete(name);
      return colonies.remove(name);
!!!176123.java!!!	compareTo(inout o : Tournament) : int
		return NAME.compareTo(o.NAME);
!!!176251.java!!!	getRanking() : Hashtable<String, Integer>
       Hashtable<String, Integer> h = new Hashtable<String, Integer>();
       Hashtable<String, Float> acumulated = getAcumulatedEnergy();
       int MAX = 3;
       int size = MAX > acumulated.size()? acumulated.size() : MAX;

       // agregar los que tienen puntos
       for(int index = 0; index < size; index++ ){
         Float max = Collections.max(acumulated.values());
         Vector<String> winTemp = new Vector<String>();

         for(Iterator<String> i = acumulated.keySet().iterator();i.hasNext();){
            String s = i.next();
            if(acumulated.get(s).equals(max))
               winTemp.addElement(s);
         }
         String keyWin = "";
         int maxBattlesWin = 0; // no puede ser !!

         for(String tmp: winTemp){
            int battleswin = battleManager.getBattlesWin(tmp);
            if(maxBattlesWin != 0 && maxBattlesWin == battleswin){
               String s =  "Ranking can't be created because there are two " +
                           "opponents with the same energy and the same number" +
                           " of battles won in the "+ NAME;
              throw new CreateRankingException(s);
            }
            if(battleswin > maxBattlesWin){
               maxBattlesWin = battleswin;
               keyWin = tmp;
            }
         }
         // chequear<si no hay varios con el mismo numero de batallas ganadas>!!
         acumulated.remove(keyWin);
         h.put(keyWin, MAX-index);
       }
       // agregar los que no tienen puntos !
       for(Iterator<String> i = acumulated.keySet().iterator(); i.hasNext();){
          String name= i.next();
          if(!h.containsKey(name)){
             h.put(name, new Integer(0));
          }
       }
     /*         System.out.println("***********************************************");
       for(Iterator<String> i = h.keySet().iterator(); i.hasNext();){
          String name = i.next();
          System.out.println(name + "-"+h.get(name));

       }
       System.out.println("***********************************************");
*/
      return h;
!!!176379.java!!!	getAcumulatedEnergy() : Hashtable<String, Float>
		 Hashtable<String, Float> table = battleManager.getResults();

       for(String c: colonies){
           if(!table.containsKey(c))
               table.put(c, new Float(0));
       }

       return table;
!!!176507.java!!!	getBattleManager() : BattleManager
       return battleManager;
!!!176635.java!!!	getNames() : Vector<String>
       Vector<String> names = battleManager.getNames();

       for(String c: colonies)
           if(!names.contains(c))
               names.addElement(c);
       
       return names;
!!!176763.java!!!	read() : boolean
        try {
            battleManager.read();
        } catch (FileNotFoundException ex) {
				System.out.println("Tournamenent.read()");
            Logger.getLogger(Tournament.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } catch (IOException ex) {
				System.out.println("Tournamenent.read()");
            Logger.getLogger(Tournament.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        return true;
!!!176891.java!!!	save(in path : String) : void
		  String battlePath = path + File.separator+this.NAME;
		  File f = new File(battlePath);

		  if(!f.exists()){
				f.mkdir();
		  }
		  battleManager.save();
!!!177019.java!!!	hasBackUpFile() : boolean
		return new File(battleManager.getPath()+ File.separator+"battles_backup.csv").exists();
