class BattleUI
!!!153339.java!!!	BattleUI(inout contestUI : ContestUI, inout restore : boolean)
		this.father = contestUI;
		this.environment = father.getContest().getEnvironment();
		this.tournament = father.getContest().getTournamentManager().getSelected();
		
		setLayout(new BorderLayout());
		setBorder(BorderFactory.createTitledBorder("Battles "));
		add(BorderLayout.NORTH, createNorthPanel());
		add(BorderLayout.CENTER, createCenterPanel());
		add(BorderLayout.SOUTH, createSouthPanel());
		
		if(restore){
			Vector<String[]> battles = readBattles("battles.csv");
			Vector<String[]>backup = readBattles("battles_backup.csv");
		
			validate(battles, backup);
			restoreBattles(backup);
		}
!!!153467.java!!!	restoreBattles(inout backup : Vector<String []>) : void
		for(String [] line: backup){
			try {
            String name1 = line[0], name2 = line[1], nameNut = line[2];
            int index1 = environment.getColonyID(name1);
            int index2 = environment.getColonyID(name2);
            int indexNut =environment.getAgar().getNutrientID(nameNut);
            System.out.println(name1);
            System.out.println(name2);
            System.out.println(index1);
            System.out.println(index2);
            
            BattleRun battle = new BattleRun(index1, index2, indexNut, name1, name2, nameNut);
				
            addBattle(battle, father.getContest().getMode() == Contest.PROGRAMMER_MODE);
			} catch (CreateBattleException ex) {
            Message.printErr(father,ex.getMessage());
         }
		}// end for!!	
!!!153595.java!!!	validate(inout battles : Vector<String []>, inout backup : Vector<String []>) : void
		// Eliminar las batallas que ya se corrieron
		Vector<String []> todelete = new Vector<String[]>();
		for(String [] line: battles){
			for(String [] line_backup:backup){
				if((line[0].toLowerCase().equals(line_backup[0].toLowerCase()) &&
  					 line[1].toLowerCase().equals(line_backup[1].toLowerCase()) &&
					 line[2].toLowerCase().equals(line_backup[2].toLowerCase()) ) ||
					(line[0].toLowerCase().equals(line_backup[1].toLowerCase()) &&
  					 line[1].toLowerCase().equals(line_backup[0].toLowerCase()) &&
					 line[2].toLowerCase().equals(line_backup[2].toLowerCase()))) {
					 	todelete.addElement(line_backup);
					 }
			}
		}
		// Eliminar las batallas con distribuciones de nutrientes que no están disponibles.
		Vector<String> nutrients = environment.getAgar().getNutrients();
		
		for(String [] l:backup){
			boolean b = false;
			for(String n: nutrients){
				if(l[2].toLowerCase().equals(n.toLowerCase())){
					b = true;
				}
			}
			if(b == false){
				todelete.addElement(l);
			}
		}

		// eliminar las batallas con Colonias que no estan disponibles.
		Vector<String> colonies = environment.getNames();

		for(String [] l:backup){
			int b = 0;
			for(String c: colonies){
				if(l[0].toLowerCase().equals(c.toLowerCase()))
					b++;
				else if(l[1].toLowerCase().equals(c.toLowerCase())) 
					b++;					
			}
			if(b != 2){
				todelete.addElement(l);
			}
		}
		
		for(String [] d: todelete){
			backup.remove(d);	
		}
!!!153723.java!!!	readBattles(in name : String) : Vector<String[]>
		Vector<String []> res = new Vector<String []>();
     	String url = tournament.getBattleManager().getPath() + File.separator + name;

		try {	   	
         FileReader fr = new FileReader(url);
         BufferedReader br = new BufferedReader(fr);
         String line = "";
         
         while((line = br.readLine()) != null){
            String [] s = line.split(",");
            
            if(s != null && s.length >= 3 ){
               String [] tmp = new String[]{s[0], s[1], s[2]};
               res.addElement(tmp);
            }
         }

         br.close();
       	
      } catch (IOException ex) {	 }
      return res;
!!!153851.java!!!	createNorthPanel() : JPanel
		JPanel northPanel = new JPanel();
		
		JLabel labelOp1 = new JLabel("Op.1");
		JLabel labelOp2 = new JLabel("Op.2");
		JLabel labelDist = new JLabel("Nutrients");

	 	oponents = environment.getOps();
		nutrients = father.getContest().getNutrients();
		
		oponent1 = new JComboBox(new MiComboboxModel(oponents));
		oponent2 = new JComboBox(new MiComboboxModel(oponents));		
		nutrient = new JComboBox(new MiComboboxModel(nutrients));

		oponent1.setMinimumSize(new Dimension(100, 20));
		oponent2.setMinimumSize(new Dimension(100, 20));
		
		northPanel.add(labelOp1);
		northPanel.add(oponent1);
		northPanel.add(labelOp2);
		northPanel.add(oponent2);
		northPanel.add(labelDist);
		northPanel.add(nutrient);
		
		return northPanel;
!!!153979.java!!!	createSouthPanel() : JMenuBar
		JMenuBar menuBar = new JMenuBar();
		
		save = new JButton(new ImageIcon("icons/save.png"));
		delete = new JButton(new ImageIcon("icons/delSelectedBattle.png"));
		deleteAll = new JButton(new ImageIcon("icons/delAllBattle.png"));
		run = new JButton(new ImageIcon("icons/run.png"));
		runAll = new JButton(new ImageIcon("icons/runAll.png"));
		addSelected = new JButton(new ImageIcon("icons/addSelectedBattle.png"));
		addAll = new JButton(new ImageIcon("icons/addAllBattle.png"));
		
		// set tool tip text !!
		save.setToolTipText("save list of battles");
		delete.setToolTipText("delete selected battle");
		deleteAll.setToolTipText("clear all battles");
		run.setToolTipText("run selected battle");
		runAll.setToolTipText("run all battles");
		addSelected.setToolTipText("add Selected battle to list of battles");
		addAll.setToolTipText("add all battles");
		
		// add listener
      save.addActionListener(this);
      delete.addActionListener(this);
      deleteAll.addActionListener(this);
      run.addActionListener(this);
      runAll.addActionListener(this);
      addSelected.addActionListener(this);
      addAll.addActionListener(this);
		
      // add to menubar      
		menuBar.add(save);
		menuBar.add(delete);
		menuBar.add(deleteAll);
		menuBar.add(run);
		menuBar.add(runAll);
		menuBar.add(addSelected);
		menuBar.add(addAll);
		
		return menuBar;
!!!154107.java!!!	actionPerformed(inout e : ActionEvent) : void
      if(e.getSource().equals(save)){
         Message.printErr(father, "not Soported yet");
		} else if(e.getSource().equals(delete)){
         if(model.size() == 0){
            Message.printErr(father,"You must create a battle.");
         } else if(battlesList.isSelectionEmpty()){
            Message.printErr(father,"You must select a battle.");
         } else{  
				remove((BattleRun)battlesList.getSelectedValue());
            
            if(battlesList.getSelectedIndex() >= model.size())
               battlesList.setSelectedIndex(model.size()-1);
         }
		} else if(e.getSource().equals(deleteAll)){
          if(model.size()> 0){
            model.clear();
            battlesList.updateUI();
         } else
            Message.printErr(father,"You can´t delete battles, there are not battles");
		} else if(e.getSource().equals(run)){
			if(hasTournament == false){
				Message.printErr(father,"You must create a tournament.");
			}else if(model.size() == 0) {
            Message.printErr(father,"You must create a battle.");
         } else if(battlesList.isSelectionEmpty()){
            Message.printErr(father,"You must select a battle.");
         } else {
				DefaultListModel model_tmp = new DefaultListModel();
				model_tmp.addElement(battlesList.getSelectedValue());

				createBattlesFileSelected();
				GUIdosD g = new GUIdosD(father, environment, model_tmp);

				deleteBattlesFile();
				remove((BattleRun)battlesList.getSelectedValue());
            
            if(battlesList.getSelectedIndex() >= model.size())
               battlesList.setSelectedIndex(model.size()-1);
         }
      } else if(e.getSource().equals(runAll)){
			if(hasTournament == false){
				Message.printErr(father,"You must create a tournament.");
			}else if(model.size() == 0){
            Message.printErr(father,"You must create a battle.");
         } else {
         	createBattlesFileAll();
	        	GUIdosD g = new GUIdosD(father, environment, model);
				deleteBattlesFile();
			} 
			
		} else if(e.getSource().equals(addSelected)) {
         if( environment.getOps().isEmpty()){
            Message.printErr(father, "You can´t create battles, there are not oponentes");
            return ;
         }
         try {
            int index1 = oponents.get(oponent1.getSelectedItem()).intValue();
            int index2 = oponents.get(oponent2.getSelectedItem()).intValue();
            int indexNut =nutrients.get(nutrient.getSelectedItem()).intValue();
            String name1 = oponent1.getSelectedItem().toString();
            String name2 = oponent2.getSelectedItem().toString();
            String nameNut = nutrient.getSelectedItem().toString();
            
            BattleRun battle = new BattleRun(index1, index2, indexNut, name1, name2, nameNut);
				
            if(!addBattle(battle, father.getContest().getMode() == Contest.PROGRAMMER_MODE))
               Message.printErr(this, "Existing battle");
               
			} catch (CreateBattleException ex) {
            Message.printErr(father,ex.getMessage());
         }
		} else if(e.getSource().equals(addAll)){
         if(environment.getOps().isEmpty())
            Message.printErr(father, "You can´t create battles, there are not oponentes");

         else
            generateAllBattle();
		}
!!!154235.java!!!	createCenterPanel() : JScrollPane
		battlesSP = new JScrollPane(battlesList, 
						  JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, 
						  JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		battlesSP.setPreferredSize(new Dimension(200, 200));
		return battlesSP;
!!!154363.java!!!	addBattle(inout b : BattleRun, inout option : boolean) : boolean
      BattleManager bm = father.getContest().getTournamentManager().lastElement().getBattleManager();
      boolean competition = father.getContest().getMode() == Contest.COMPETITION_MODE;
      boolean OK = true;
      
      if(competition && (model.contains(b) ||( hasTournament && bm.contain(b)))){
         if(option)
            OK = Message.printYesNoCancel(father, "Existing battle. Are you sure you want to create a battle.");
         else {
         	OK = false;
         }
      }
      if( OK ){
         model.addElement(b);
         battlesList.updateUI();
         battlesList.setSelectedIndex(0);
      }
      return OK;
!!!154491.java!!!	generateAllBattle() : void
		for(Enumeration<String> op_a = oponents.keys(); op_a.hasMoreElements();){
			String n_a = op_a.nextElement(); // name_oponent_a
			Integer i_a = oponents.get(n_a); // index_oponent_a

			for(Enumeration<String> op_b = oponents.keys();op_b.hasMoreElements();){
				String n_b = op_b.nextElement(); // name_oponent_b
				Integer i_b = oponents.get(n_b); // index_oponent_b
				
				if(i_a>= i_b) continue;
				
				for(Enumeration<String> nut = nutrients.keys();nut.hasMoreElements();){
					String n_n = nut.nextElement();  	// name_nutrient
					Integer i_n = nutrients.get(n_n);	// index_nutrient
					try{
						boolean option = father.getContest().getMode() == Contest.PROGRAMMER_MODE;
						if(!addBattle(new BattleRun(i_a, i_b, i_n, n_a, n_b, n_n), option))
		               Message.printErr(this, "Existing battle.");
					} catch(CreateBattleException ex ){
						System.out.println("cant create battle .. :(");
					}
				}	
			}
		}
!!!154619.java!!!	getBattles() : DefaultListModel
      return model;
!!!154747.java!!!	repaint() : void
		synchronized(BattleUI.class){
		try{
			
        	super.repaint();
//			this.battlesList.updateUI();
	//		this.battlesSP.updateUI();
			this.nutrient.updateUI();
			this.oponent1.updateUI();
			this.oponent2.updateUI();
		} catch(Exception ex) {}
		}
!!!154875.java!!!	setHastTournament(inout b : boolean) : void
		hasTournament = b;
!!!155003.java!!!	updateNutrients() : boolean
		nutrients = father.getContest().getNutrients();
      
      nutrient.setModel(new MiComboboxModel(nutrients));
      nutrient.updateUI();
      return true;
!!!155131.java!!!	updateOponents() : boolean
	   oponents = environment.getOps();
			
		oponent1.setModel(new MiComboboxModel(oponents));
		oponent2.setModel(new MiComboboxModel(oponents));
		oponent1.updateUI();
		oponent2.updateUI();
      return true;
!!!155259.java!!!	delete(in colonyName : String) : boolean
	
		Vector<BattleRun> indexs = new Vector<BattleRun>();

		for(int i= 0; i < getBattles().size(); i++ ){
			BattleRun b = (BattleRun) getBattles().elementAt(i);
			
			if(b.name1.equals(colonyName)||	b.name2.equals(colonyName))
				indexs.addElement(b);
		}

		for(BattleRun b : indexs)
	      getBattles().removeElement(b);		
		
		return ((MiComboboxModel)oponent1.getModel()).remove(colonyName) &&
				 ((MiComboboxModel)oponent2.getModel()).remove(colonyName);
!!!155387.java!!!	clear() : void
      model.clear();
      battlesList.updateUI();
!!!155515.java!!!	remove(inout b : BattleRun) : void
		model.removeElement(b);
      battlesSP.updateUI();
!!!155643.java!!!	createBattlesFileSelected() : void
   	if(father.getContest().getMode() == Contest.PROGRAMMER_MODE)
   		return ;
   	   	
		String path = tournament.getBattleManager().getPath();   	
     	backupFile = path + File.separator + "battles_backup.csv";		
     	
		System.out.print("Creating back up ");

		try {
         FileWriter fr = new FileWriter(backupFile);
         PrintWriter pw = new PrintWriter(fr);
	   	String line = ((BattleRun)battlesList.getSelectedValue()).toString();
      	line = line.replace(" vs ", ",");
      	line = line.replace(" in ", ",");
         pw.println(line);
         pw.close();
         
		   System.out.println("[OK]");
		   
      } catch (FileNotFoundException ex) {
      	System.out.println("[FAIL]");
      } catch (IOException ex) {
        	System.out.println("[FAIL]");
      }
    	
!!!155771.java!!!	deleteBattlesFile() : boolean
     	if(father.getContest().getMode() == Contest.PROGRAMMER_MODE)
   		return true;
   		
   	System.out.print("Removing back up ");

   	if(backupFile == "") {
	    	System.out.println("[FAIL]");   		
   		return false;
   	}
   	
      if(new File(backupFile).delete()){
       	System.out.println("[OK]");
       	return true;
      } else{
	    	System.out.println("[FAIL]");      
	    	return false;
      }
!!!155899.java!!!	createBattlesFileAll() : void
   	if(father.getContest().getMode() == Contest.PROGRAMMER_MODE)
   		return ;
   	   	
		String path = tournament.getBattleManager().getPath();   	
     	backupFile = path + File.separator + "battles_backup.csv";		
     	
		System.out.print("Creating back up ");

		try {
	   	String line = "";
         FileWriter fr = new FileWriter(backupFile);
         PrintWriter pw = new PrintWriter(fr);
         
         for(int i = 0; i < model.getSize(); i++){
         	line = model.getElementAt(i).toString();
         	line = line.replace(" vs ", ",");
         	line = line.replace(" in ", ",");
	         pw.println(line);
         } 

         pw.close();
       	System.out.println("[OK]");
       	
      } catch (FileNotFoundException ex) {
      	System.out.println("[FAIL]");
      } catch (IOException ex) {
        	System.out.println("[FAIL]");
      }
