class MiThread
!!!182011.java!!!	MiThread(inout cui : ContestUI, inout p : JDialog, inout panel : JPanel, inout battles : DefaultListModel)
		
		this.cui			= cui;
		this.father		= p;
		this.panel		= panel;		
		this.battles	= battles;
		this.timewait	= cui.getContest().getTimeWait();
		
		h_xPoints = new int  [Defs.DIAMETER+4];
		h1_yPoints = new int [Defs.DIAMETER+4];
		h2_yPoints = new int [Defs.DIAMETER+4];
	
		history = new Rectangle();
      history.x = GUIdosD.K* GUIdosD.rel.x-GUIdosD.K; 
      history.y = GUIdosD.K*(5+2*GUIdosD.rel.y + (18+Defs.DIAMETER)+GUIdosD.rel.y);
      history.width = GUIdosD.K*(Defs.DIAMETER )+2*GUIdosD.K;
      history.height = 15*GUIdosD.K; 
		
		for(int i = 0; i < h_xPoints.length; i++){
			h_xPoints[i] = history.x + (i)*GUIdosD.K;
			h1_yPoints[i] = history.y;
			h2_yPoints[i] = history.y;
		}
!!!182139.java!!!	run() : void
		Environment e = cui.getContest().getEnvironment();
      try {
			paintInit();
		 
		 	while(battles.size() >0 && !closing){
				BattleRun b = (BattleRun) battles.firstElement();
				battles.removeElement(battles.firstElement());
				
				e.generateOponents(b);
				updateNames(b);

				try {
					while(!end  ) {
				  		if(estate == play){
							while(estate == play && !end ){
								end = e.moveColonies();
								paintImage();
							}
					  	} 
						if(estate == pause && !end){
							end = e.moveColonies();
                     paintImage();
		
							if(!end) bloquear();
						}
					}

					Thread.sleep(timewait);
					resetHistory();
					end = false;
				
				// actualizar los resultados !! 
					BattleRun r = cui.getContest().getEnvironment().getResults();
					cui.getContest().getTournamentManager().getSelected().add(r.name1, r.name2, r.nutrient, r.energy1(), r.energy2());
					cui.getTournamentUI().updateLast();
				
				//cui.getBattleUI().remove(b); 
            //battles.remove(b);
				panel.repaint();
				
				} catch(MoveMicroorganismException ex) {
					penalize(ex.getColonyName(),ex.getException());
					Message.printErr(panel, ex.getMessage());
				}
			}

			paintFinish();

      } catch (InterruptedException ex) {	}
!!!182267.java!!!	penalize(in colonyName : String, inout ex : Exception) : void

		DefaultListModel battles = cui.getBattleUI().getBattles();
		
	   cui.getTournamentUI().penalice(colonyName);
     // LogPrintter.print(cui.getContest().getPath(), ex);
    
      Vector<BattleRun> indexs = new Vector<BattleRun>();
		
		for(int i= 0; i < battles.size(); i++ ){
			BattleRun b = (BattleRun) battles.elementAt(i);

			if(b.name1.equals(colonyName)||	b.name2.equals(colonyName))
				indexs.addElement(b);
		}

		for(BattleRun b : indexs){	
	      battles.removeElement(b);		
		}
!!!182395.java!!!	resetHistory() : void
		for(int i = 0; i < history1.length; i++)
			history1[i] = 0;
		
		for(int i = 0; i < history2.length; i++)
			history2[i] = 0;
		
		this.energyMax = 0;
		this.historyCount = 0;
		this.historyIndex = 0;
!!!182523.java!!!	setPause() : void
            estate = pause;
!!!182651.java!!!	avanzar() : void
        this.notify();
!!!182779.java!!!	bloquear() : void
			this.wait();
!!!182907.java!!!	setPlay() : void
        estate = play;
!!!183035.java!!!	isEnd() : boolean
     
        return end;
!!!183163.java!!!	getImage() : Image
		 return dobleBuffer;
!!!183291.java!!!	paintInit() : void
		panel.setBackground(backGround);
		panel.setForeground(backGround);
		
		dobleBuffer = panel.createImage(panel.getWidth(), panel.getHeight()); 	
		dobleBuffer.getGraphics().setColor(backGround);
		dobleBuffer.getGraphics().clearRect(
							panel.getBounds().x,
							panel.getBounds().y,
							panel.getBounds().width,
							panel.getBounds().height);

		panel.getGraphics().drawImage(dobleBuffer, 0, 0, panel);

		miCG = (Graphics2D) dobleBuffer.getGraphics();
		int size = (int) (1.5 * GUIdosD.K + 4);
		miCG.setFont(new Font(Font.SANS_SERIF, Font.BOLD, size));
		miCG.setBackground(backGround);
		panel.setForeground(backGround);

		
		//updateNames(battles.firstElement());


		//panel.updateUI();
		miCG.setColor(Color.LIGHT_GRAY);
		for(int i = 10; i >= 0; i--){
			try {
				miCG.drawString("Welcome To Alifecontest-Java ", 100, 120);
				miCG.drawString("      Wait " + i + " to run"  , 100, 140);
				panel.getGraphics().drawImage(dobleBuffer, 0, 0, panel);
				Thread.sleep(timewait);
				miCG.clearRect(0, 100, panel.getWidth(), 40);
			} catch (InterruptedException ex) {}	
		}
!!!183419.java!!!	paintFinish() : void
		try {
			miCG.clearRect(0, 0, panel.getWidth(), panel.getHeight());
			miCG.drawString("bye bye...", 100, 120);
			panel.getGraphics().drawImage(dobleBuffer, 0, 0, panel);
			Thread.sleep(timewait);
		} catch (InterruptedException ex) {}	
		
		father.dispose();
!!!183547.java!!!	paintImage() : void
		try {
			miCG.clearRect(panel.getBounds().x,
								panel.getBounds().y,
								panel.getBounds().width,
								panel.getBounds().height);
         int t1 = 3* GUIdosD.K;
         miCG.setColor(petriColor);

			miCG.fill(new Ellipse2D.Float(
					  GUIdosD.K*(GUIdosD.rel.x-(float) 0.5)-light,
					  GUIdosD.K*(GUIdosD.rel.y-(float) 0.5)-light,
					  GUIdosD.K*(Defs.DIAMETER+1) + 2*light,
					  GUIdosD.K*(Defs.DIAMETER+1) + 2*light));
         			for(int i = 0; i < Defs.DIAMETER; i++){
				for(int j = 0; j < Defs.DIAMETER; j++){
					Point pos = new Point(i, j);
					if (inDish((float)GUIdosD.K*pos.x,(float)GUIdosD.K* pos.y)){  
					try {
						float nutri =  cui.getContest().getEnvironment().getAgar().getNutrient(pos.x, pos.y);  
                  
						
                  Color c = new Color(colorNutri.getRed(),
												  colorNutri.getGreen(), 
												  colorNutri.getBlue(),
												 (int) ( (Math.pow(3316.275*nutri, 0.333333333f))));

						miCG.setColor(c);
						miCG.fillRect(GUIdosD.K*(GUIdosD.rel.x+pos.x),
										 GUIdosD.K*(GUIdosD.rel.y + pos.y), 
										 GUIdosD.K, GUIdosD.K);
                  }catch (Exception ex){
 						System.out.println("error");
                  }
					}
				}
			}

			for(int i = 0; i < cui.getContest().getEnvironment().getFirstOponent().size(); i++){
				Point pos = cui.getContest().getEnvironment().getFirstOponent().getMO(i).pos;
				float ene = cui.getContest().getEnvironment().getFirstOponent().getMO(i).ene;
				
				float a = ene/(Defs.E_INITIAL*2);
				if(a > 1 ) a = 1;
				
				miCG.setColor(new Color(
						  color1.getRed(), color1.getGreen(), 
						  color1.getBlue(), (int)(255*a)) );
				
				miCG.fillOval(GUIdosD.K * (GUIdosD.rel.x+pos.x), 
						        GUIdosD.K*(GUIdosD.rel.y+pos.y), 
								  GUIdosD.K, GUIdosD.K);
			}

			for(int i = 0; i < cui.getContest().getEnvironment().getSecondOponent().size(); i++){
				Point pos = cui.getContest().getEnvironment().getSecondOponent().getMO(i).pos;
				float ene = cui.getContest().getEnvironment().getSecondOponent().getMO(i).ene;
				float a = ene/(Defs.E_INITIAL*2);
				if(a > 1 ) a = 1;
				
				miCG.setColor(new Color(
						  color2.getRed(), color2.getGreen(), 
						  color2.getBlue(), (int)(255*a)) );
				miCG.fillOval(	GUIdosD.K*(GUIdosD.rel.x+pos.x), 
									GUIdosD.K*(GUIdosD.rel.y+pos.y), 
									GUIdosD.K, GUIdosD.K);
			}
			
			
			miCG.setColor(backGround);
			miCG.setStroke(new BasicStroke(t1));
			miCG.draw(new Ellipse2D.Float(
					  GUIdosD.K*GUIdosD.rel.x-t1/2-light, 
					  GUIdosD.K*GUIdosD.rel.y-t1/2-light,  
					  GUIdosD.K*Defs.DIAMETER+t1+2*light, 
					  GUIdosD.K*Defs.DIAMETER + t1 +2*light));
			
			miCG.setColor(Color.GRAY);
			miCG.setStroke(new BasicStroke(GUIdosD.K));
			miCG.draw(new Ellipse2D.Float(
					  GUIdosD.K*(GUIdosD.rel.x-(float) 0.5)-light,
					  GUIdosD.K*(GUIdosD.rel.y-(float) 0.5)-light,
					  GUIdosD.K*(Defs.DIAMETER+1) + 2*light,
					  GUIdosD.K*(Defs.DIAMETER+1) + 2*light));
         
			
			// pintar el historial ...!!
			int t3 = (int) (0.25 * GUIdosD.K);
         
			miCG.setStroke(new BasicStroke(t3));
			miCG.drawLine(	history.x, history.y-history.height, history.x, history.y);
			miCG.drawLine(	history.x+history.width,history.y-history.height,
								history.x+history.width, history.y);
			
			for(int i = 1; i*interLine+0.1*interLine< energyMax; i++ ){
				int posy = (int) (history.y - ( i*interLine)*history.height/energyMax);
				miCG.drawLine(	history.x, posy, history.x+history.width, posy);
			}
         
			updateHistoty();
			
			miCG.setColor(color1);
			miCG.drawString("" + (long) cui.getContest().getEnvironment().getFirstOponent().getEnergy() , 
								 textPosition.x, 
								 textPosition.y);
			miCG.drawPolyline(h_xPoints, h1_yPoints, historyCount);
			miCG.setColor(color2);
			miCG.drawString("" +  (long)cui.getContest().getEnvironment().getSecondOponent().getEnergy(), 
								 textPosition.x+anchoText+anchoNum, 
								 textPosition.y);
			miCG.drawPolyline(h_xPoints, h2_yPoints, historyCount);
			
			miCG.setColor(Color.GRAY);
			miCG.drawString(textOponent, textPosition.x+anchoNum, textPosition.y);
			miCG.drawLine(history.x,textPosition.y-GUIdosD.K*5, history.x+history.width, textPosition.y-GUIdosD.K*5);
			// updateUI();
			panel.getGraphics().drawImage(dobleBuffer, 0, 0, panel);
		} catch(Throwable exception){
			
			/*dobleBuffer = padre.createImage(panel.getWidth(), panel.getHeight()); 	
			dobleBuffer.getGraphics().setColor(Color.BLACK);
			dobleBuffer.getGraphics().clearRect(
								panel.getBounds().x,
								panel.getBounds().y,
								panel.getBounds().width,
								panel.getBounds().height);
			
			panel.getGraphics().drawImage(dobleBuffer, 0, 0, padre);

			miCG = (Graphics2D) dobleBuffer.getGraphics();
			int size = (int) (1.5 * GUIdosD.K + 4);
			miCG.setFont(new Font(Font.SANS_SERIF, Font.BOLD, size));
			miCG.setBackground(Color.BLACK);
			
			anchoNum = miCG.getFontMetrics().stringWidth("0000000");
			textOponent = e.getOponents().elementAt(e.getFirstOponent()).toString()+ " vs " +  
					        e.getOponents().elementAt(e.getSecondOponent()).toString();
			anchoText = miCG.getFontMetrics().stringWidth(textOponent + "   ");
			textPosition = new Point((panel.getWidth() - 2*anchoNum-anchoText)/2, 
					                   GUIdosD.K* (GUIdosD.rel.y+Defs.DIAMETER+5));
			
			*
			panel.updateUI();*/
		}
!!!183675.java!!!	updateHistoty() : void
		// actualizar el historial de las energias de las colias!!
		history1[historyIndex] = Math.round(cui.getContest().getEnvironment().getFirstOponent().getEnergy());
		history2[historyIndex] = Math.round(cui.getContest().getEnvironment().getSecondOponent().getEnergy());
			
		energyMax = Math.max(getMax(history1), getMax(history2));
		
		double factor  = Math.pow(energyMax, -1) * history.height;
		
		if(historyCount == h_xPoints.length-1){		 
			for(int index =1; index <= historyCount; index++){
				int i = (historyIndex+index) % history1.length;
				
				h1_yPoints[index-1] = (int) (history.y - history1[i] * factor); 
		 		h2_yPoints[index-1] = (int) (history.y - history2[i] * factor); 
		 	}	 
		}
		 
		if(historyCount < h_xPoints.length-1)
			++historyCount;
		 
		h1_yPoints[historyCount-1] = (int) (history.y - history1[historyIndex] * factor);
		h2_yPoints[historyCount-1] = (int) (history.y - history2[historyIndex] * factor);
		
		historyIndex =  (historyIndex+1) % history1.length;
!!!183803.java!!!	getMax(in a : int) : int
		 int max = 0;
		 
		 for(int i = 0; i < a.length; i++)
			 if(a[i] > max)
				 max = a[i];
		 
		 return max;
!!!183931.java!!!	inDish(in x : float, in y : float) : boolean
      float radio =  (2+Defs.RADIUS) * GUIdosD.K; 
      float rel = 2*GUIdosD.K;
		
      return ((x+rel-radio)*(x+rel-radio)+ (y+rel-radio)*(y+rel-radio)) <
                ((radio)*(radio));
!!!184059.java!!!	updateNames(inout b : BattleRun) : void
	  	  Environment e = cui.getContest().getEnvironment();
		  anchoNum = miCG.getFontMetrics().stringWidth("0000000");
			textOponent = e.getName(b.ID1)+ " vs " +e.getName(b.ID2);
			anchoText = miCG.getFontMetrics().stringWidth(textOponent + "   ");
			textPosition = new Point((panel.getWidth() - 2*anchoNum-anchoText)/2, 
										 GUIdosD.K* (GUIdosD.rel.y+Defs.DIAMETER+10));
         
