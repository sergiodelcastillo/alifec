class DialogPreferences
!!!167163.java!!!	DialogPreferences(inout father : ContestUI)
		super(father, "Preferences ", true);
		this.father = father;

      GroupLayout layout = new GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

      this.addEscapeKey();				
		accept.addActionListener(this);
		cancel.addActionListener(this);
		tabbedPane = new JTabbedPane();
		tabbedPane.addTab("General", createGeneralPanel());
		tabbedPane.addTab("Nutrients", createNutrientsPanel());
		tabbedPane.addTab("Graphics", createGraphicsPanel());

      layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).
              addComponent(tabbedPane).
              addGroup(layout.createSequentialGroup().
                addComponent(accept).
                addComponent(cancel)));

      layout.setVerticalGroup(layout.createSequentialGroup().
              addComponent(tabbedPane).
              addGroup(layout.createParallelGroup().
              addComponent(accept).addComponent(cancel)));

      pack();
		
      int posX = father.getX() + (father.getWidth()-getWidth())/2;
		int posY = father.getY() + (father.getHeight()-getHeight())/2;

      setLocation(posX, posY);
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setResizable(false);
		setVisible(true);
!!!167291.java!!!	addEscapeKey() : void
      KeyStroke escape = KeyStroke.getKeyStroke (KeyEvent.VK_ESCAPE, 0, false);
      
      AbstractAction escapeAction = new AbstractAction() {
	      private static final long serialVersionUID = 7L;
         public void actionPerformed(ActionEvent e) {
            dispose();
         }
      };

      getRootPane ().getInputMap (JComponent.WHEN_IN_FOCUSED_WINDOW).put (escape, "ESCAPE");
      getRootPane ().getActionMap ().put ("ESCAPE", escapeAction);
!!!167419.java!!!	createGeneralPanel() : Component
		JPanel general = new JPanel();
      GroupLayout layout = new GroupLayout(general);
      general.setLayout(layout);
      layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

      Dimension d = new Dimension(170, 25);
      Dimension max = new Dimension(300, 25);

      JLabel labelNameOfContest = new JLabel("Name of Contest");
		JTextField nameOfContest_first = new JTextField("Contest");
		nameOfContest = new JTextField(father.getContest().getName().substring("Contest".length()));
      nameOfContest_first.setEditable(false);
      nameOfContest_first.setMaximumSize(new Dimension(70, max.height));
      nameOfContest.setMaximumSize(new Dimension(max.width-75, max.height));

      JLabel labelDefaultPath = new JLabel("Default Path: ");
		defaultPath  = new JTextField(father.getContest().getPath());
      defaultPath.setMaximumSize(max);

		JLabel labelDefaultPause = new JLabel("Pause Between Battles ");
		defaultPause = new JComboBox(time);
		defaultPause.setSelectedItem(father.getContest().getTimeWait() + "");
      defaultPause.setMaximumSize(max);
      defaultPause.setSelectedItem(father.getContest().getTimeWait()+"");


      JLabel labelDefaultMode = new JLabel("Default Mode");
		modeOfContest = new JComboBox(new String[]{ "Programmer", "Competition"});
		modeOfContest.setMaximumSize(max);
      modeOfContest.setSelectedIndex(father.getContest().getMode());
      
		labelDefaultMode.setMaximumSize(d);
		labelDefaultMode.setMinimumSize(d);
	   labelDefaultPath.setMaximumSize(d);
		labelDefaultPath.setMinimumSize(d);
	   labelNameOfContest.setMaximumSize(d);
		labelNameOfContest.setMinimumSize(d);
		labelDefaultPause.setMaximumSize(d);
		labelDefaultPause.setMinimumSize(d);

      layout.setHorizontalGroup(
        layout.createParallelGroup().
            addGroup(layout.createSequentialGroup().
                    addComponent(labelNameOfContest).
                    addComponent(nameOfContest_first).
                    addComponent(nameOfContest)).
            addGroup(layout.createSequentialGroup().
                    addComponent(labelDefaultPath).
                    addComponent(defaultPath)).
             addGroup(layout.createSequentialGroup().
                    addComponent(labelDefaultPause).
                    addComponent(defaultPause)).
             addGroup(layout.createSequentialGroup().
                    addComponent(labelDefaultMode).
                    addComponent(modeOfContest))
      );

      layout.setVerticalGroup(layout.createSequentialGroup().
              addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).
                addComponent(labelNameOfContest).
                addComponent(nameOfContest_first).
                addComponent(nameOfContest)).
              addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).
                addComponent(labelDefaultPath).
                addComponent(defaultPath )).
              addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).
                addComponent(labelDefaultPause).
                addComponent(defaultPause)).
              addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).
                addComponent(labelDefaultMode).
                addComponent(modeOfContest)));
      
		general.setBorder(BorderFactory.createTitledBorder("Default Options "));		
		return general;
!!!167547.java!!!	createGraphicsPanel() : Component
		JPanel graphics = new JPanel();
		GroupLayout layout = new GroupLayout(graphics);

		graphics.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

		ButtonGroup group = new ButtonGroup();
		JRadioButton openGL = new JRadioButton("OpenGL");
		JRadioButton java2D = new JRadioButton("java2D (Doubble Buffer)");
		JRadioButton java3D = new JRadioButton("Java3D");
      
		openGL.setEnabled(false);
		java3D.setEnabled(false);
		java2D.setSelected(true);
		
		group.add(openGL);
		group.add(java2D);
		group.add(java3D);

		layout.setVerticalGroup(layout.createSequentialGroup().
                addComponent(openGL).
                addComponent(java2D).
                addComponent(java3D));

      layout.setHorizontalGroup(
              layout.createParallelGroup(GroupLayout.Alignment.LEADING).
                addComponent(openGL).
                addComponent(java2D).
                addComponent(java3D));
	
		graphics.setBorder(BorderFactory.createTitledBorder("Graphics Options"));
		
		return graphics;
!!!167675.java!!!	createNutrientsPanel() : Component
      JPanel nutrientPanel = new JPanel();
		GroupLayout layout = new GroupLayout(nutrientPanel);
      Hashtable<String, Integer> selNutrients = father.getContest().getNutrients();

		nutrientPanel.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

		GroupLayout.SequentialGroup sequentialgroup = layout.createSequentialGroup();
		GroupLayout.ParallelGroup parallelgroup = layout.createParallelGroup();
		
		for(int i = 0; i < Agar.nutrient.length; i++){
			Nutrient n = Agar.nutrient[i];	
			nutrients[i] = new JCheckBox(n.toString());
			
			if(selNutrients.containsKey(n.toString()))
				 nutrients[i].setSelected(true);
					
			sequentialgroup.addComponent(nutrients[i]);
         parallelgroup.addComponent(nutrients[i]);
		}

      layout.setHorizontalGroup(parallelgroup);
      layout.setVerticalGroup(sequentialgroup);
		nutrientPanel.setBorder(BorderFactory.createTitledBorder("Nutrient Options "));
		
		return nutrientPanel;
!!!167803.java!!!	actionPerformed(inout ev : ActionEvent) : void
 
			if(ev.getSource() .equals(cancel)){
				dispose();
			}
			if(ev.getSource().equals(accept)){
				updateConfig();
				if(updateNutrient()){
               father.getBattleUI().updateNutrients();
            }
				dispose();
			}
!!!167931.java!!!	updateConfig() : boolean
			 try {
					Contest contest = father.getContest();
					String path = defaultPath.getText();
					String name = "Contest-" + nameOfContest.getText();
					int mode = this.modeOfContest.getSelectedIndex();
					int pause = new Integer(defaultPause.getSelectedItem().toString()).intValue();

					contest.updateConfig(path, name, mode, pause);
					
			 } catch (FileNotFoundException ex) {
					return false;
			 }
			 return true;
!!!168059.java!!!	updateNutrient() : boolean
			 try {
					Contest contest = father.getContest();
					int size = 0;
					
					// count the selected nutrients.
					for(JCheckBox nut: nutrients)
						if(nut.isSelected()) ++size;
					
					int[] nutris = new int[size];
					int j = 0;
					
					for(int nut=0; nut < nutris.length; nut++){
							while(!nutrients[j].isSelected()) ++j;
							nutris[nut] = Agar.nutrient[j].getID();
							j++;
					}
					
					contest.updateNutrient(nutris);
			 } catch (IOException ex) {
					return false;
			 }
			 return true;
