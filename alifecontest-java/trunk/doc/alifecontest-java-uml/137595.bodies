class TournamentPanel
!!!179067.java!!!	TournamentPanel(in father : ContestUI, inout tournament : Tournament, inout c : Color)
		super();
		t = tournament;
		setCellRenderer(new OponentUI(this));
		this.setModel(addComponents());
      this.setBackground(new Color(c.getRed(), c.getGreen(), c.getBlue()));
 	
   	pm.add(deleteOfTournament);
	   pm.add(new JPopupMenu.Separator());
   	pm.add(deleteOfContest);
	 	
		final JList list = this;
		// add popup menu.
		addMouseListener(new MouseAdapter() {
     		public void mouseClicked(MouseEvent me) {
       		if( SwingUtilities.isRightMouseButton(me)	&& !isSelectionEmpty() && 
					 locationToIndex(me.getPoint()) == getSelectedIndex()) {
               pm.show(list, me.getX(), me.getY());
            }	
        }
      });
		deleteOfContest.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				String selected = getSelected();

				System.out.println("delete of contest:"+ selected);
				System.out.println("Implementar");
			}
		});

		deleteOfTournament.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				String selected = getSelected();
				father.getBattleUI().delete(selected);
				father.getTournamentUI().delete(selected);
				father.getContest().getEnvironment().delete(selected);
				update();
			}
		});
!!!179195.java!!!	getSelected() : String
		String sel = ((ListOponent)getSelectedValue()).getName();
		int index = sel.indexOf(". ");
		return sel.substring(index+2);		
!!!179323.java!!!	update() : void
		try{
			setModel(addComponents());
		} catch(NullPointerException ex){
      	System.out.println("tournamentpanel.update().. error");
		}
!!!179451.java!!!	addComponents() : DefaultListModel
		synchronized (Tournament.class){
		DefaultListModel model = new DefaultListModel();
		Hashtable<String, Float> h =  t.getAcumulatedEnergy();
      int index = 0;
      
      for(Iterator<String> i = h.keySet().iterator(); i.hasNext();index++){
         String key = i.next();
         int value = h.get(key).intValue();
         long max = (long) t.getMaxEnergy();
         model.addElement(new ListOponent(index+". " + key, value, max));
      }
		return model;
	}
