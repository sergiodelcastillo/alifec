class Agar
!!!133115.java!!!	Agar()
		 nutrients = new float[50][50];
!!!133243.java!!!	eat(inout p : Point, in e : float) : float
       if(p == null  || e < 0 ||e > 1 ||
          p.x > Defs.DIAMETER || p.x < 0 ||
          p.y > Defs.DIAMETER || p.y < 0  ||
          nutri_id ==-1)
         throw  new IllegalArgumentException("Ilegal argument");
       
		 int x = p.x;
		 int y = p.y;
		 x = (nutrients.length+p.x+dx)%nutrients.length;
		 y = (nutrients.length+p.y+dy)%nutrients.length;
		 
      float foot = e*nutrients[x][y];
      nutrients[x][y] -= foot;
      
      // si e < 0 --> puede quedar nutriente nulo!! 
      
      if(nutrients[x][y] < 0)
         nutrients[x][y] = 0;
        
      return foot;
!!!133371.java!!!	moveRandom() : void
		 dx += new Random().nextInt(3)-1;
		 dy += new Random().nextInt(3)-1;
		 
		 if(dx == Defs.DIAMETER || dx == -Defs.DIAMETER) dx = 0;
 		 if(dy == Defs.DIAMETER || dy == -Defs.DIAMETER) dy = 0;
		  
!!!133499.java!!!	setNutrient(in id : int) : void
		  Nutrient nutri = null;

		  switch(id){
			  case InclinedPlane.ID: 
				  nutri = new InclinedPlane();
				  break;
			  case VerticalBar.ID: 
				  nutri = new VerticalBar();
				  break;
			  case Rings.ID:	
				  nutri = new Rings();
				  break;
			  case Lattice.ID:
				  nutri = new Lattice();
				  break;
			  case TwoGaussians.ID:	
				  nutri = new TwoGaussians();
				  break;
			  case Famine.ID: 
				  nutri = new Famine();
				  break;
			  default:
				  throw new IllegalArgumentException("IllegalArgument");
		  }

        for(int i =0; i < 50; i++)
            for(int j =0; j < 50; j++)
               nutrients[i][j] = nutri.getNutrient(new Point(i, j));
         
       nutri_id = id ; 
!!!133627.java!!!	getDistNutri() : int
        return nutri_id;
!!!133755.java!!!	getNutrient(in x : int, in y : int) : float
       if(nutri_id == -1||
        x< 0 || x >=Defs.DIAMETER ||
         y< 0 ||  y >=Defs.DIAMETER )
          throw  new IllegalArgumentException("Illegal Argument");
 
       
		int xx = (nutrients.length+x+dx)%nutrients.length;
		int yy = (nutrients.length+y+dy)%nutrients.length;
		try{
      return nutrients[xx][yy];
		} catch (Exception e){
			e.printStackTrace();
			return 0;
		}
!!!133883.java!!!	getNutrientID(in nut : String) : int
   	for(Nutrient n: nutrient){
   		if(nut.toLowerCase().equals(n.toString().toLowerCase())){
   			return n.getID();
   		}
   	}
   	return -1;
!!!134011.java!!!	getNutrients() : Vector<String>
   	Vector<String> res = new Vector<String>();
   	for(Nutrient n: nutrient){
   		res.addElement(n.toString());
   	}
   	return res;
