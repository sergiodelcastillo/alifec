class Environment
!!!141691.java!!!	Environment(in mospath : String)
		agar = new Agar();
      colonies = new Vector<Colony> ();
      
		System.out.println("\nLoading Colonies");
		System.out.println("Loading Java Colonies");

		for(String name: AllFilter.list_names_java(mospath)){
			try {
				System.out.print(name);
				colonies.addElement(new JavaColony(colonies.size(), "lib.MOs."+name));
				System.out.println("[OK]");
		   } catch (ClassNotFoundException ex){ 
				System.out.println("[FAIL]");
      	}
      }

      // load library
		System.out.println("\nLoading C++ Colonies ");
		System.out.print("Loading C++ Library ");

      if(CppColony.loadLibrary()){
			System.out.println("[OK]");

     		for(String name: AllFilter.list_names_cpp(mospath)){
				try {
					// Solo para que se inicialice el nombre de la colonia 
					System.out.print(name);
					colonies.addElement(new CppColony(colonies.size(), name));
					System.out.println("[OK]");
		   	} catch (ClassNotFoundException ex){ 
					System.out.println("[FAIL]");
      		}	
   		}
      }else {
			System.out.println("[FAIL]");
      }
            
      // set the environment !!
     	ColonyRule.env = this;
     	Petri.getInstance().setEnvironment(this);
!!!141819.java!!!	delete(in name : String) : boolean
		for(Colony c: colonies){
			if(name.equalsIgnoreCase(c.getName())){
			return colonies.remove(c);
//			return true;
			}
		}
		return false;
!!!141947.java!!!	generateOponents(inout b : BattleRun) : void
		oponents = b;
		
		agar.setNutrient(b.nutrientID);
		
		for(int i = 0; i < colonies.size(); i++){
			if(colonies.elementAt(i).id == b.ID1)
				c1 = colonies.elementAt(i);
		}
		
		for(int i = 0; i < colonies.size(); i++){
			if(colonies.elementAt(i).id == b.ID2)
				c2 = colonies.elementAt(i);
		}
			

		Petri.getInstance().agar  = agar;
		Petri.getInstance().firstOponent = c1;
		Petri.getInstance().secondOponent = c2;

		microorganism = new Cell[Defs.DIAMETER][Defs.DIAMETER]; 
		init(c1);
		init(c2);

!!!142075.java!!!	init(inout c : Colony) : boolean
        Random r = new Random();
     	  
     	  c.clear();// evitar muchos problemas :D:D!!
     	  		  
        for(int index = 0; index < Defs.MO_INITIAL; ){
				Point p = new Point(r.nextInt(Defs.DIAMETER), r.nextInt(Defs.DIAMETER));

            if(createInstance(p, Defs.E_INITIAL, c.id))
               ++index;
        }
      
      return true;
!!!142203.java!!!	toPositionColony(inout c : Colony) : void
        Random random = new Random();
		  
        for(int index = 0; index < Defs.MO_INITIAL; ){
            int x = random.nextInt(Defs.DIAMETER);
            int y = random.nextInt(Defs.DIAMETER);
            
            if(createInstance(new Point(x, y), Defs.E_INITIAL, c.id)){					
               ++index;
             }
        }
!!!142331.java!!!	moveColonies() : boolean

		Vector<Cell> allOps = new Vector<Cell>();
      
		for(int i = 0; i < c1.size(); i++)
			allOps.addElement(c1.getMO(i));

		for(int i = 0; i < c2.size(); i++)
			allOps.addElement(c2.getMO(i));
   
		// randomize list!
		Collections.shuffle(allOps);
	
		while(!allOps.isEmpty()){
			Cell mo = allOps.remove(allOps.size()-1);
			Colony current, enemy;

			if(mo.id == c2.id){
				current = c2;
				enemy = c1;
			} else {
				current = c1;
				enemy = c2;
			}

			int indexMO = current.getMOs().indexOf(mo);
			if(indexMO < 0) 
				continue; 			
			
			boolean mitosis=false;
			Movement mov= new Movement(); //{0,0};
				
			try{

				current.update(indexMO, mo.ene, mo.pos.x, mo.pos.y);
				mov = current.move(indexMO);	
				mitosis = current.mitosis(indexMO);
			} catch (Exception ex){
				String txt = "The colony: " + current.getName() + " has been Penalized.";
				throw new MoveMicroorganismException(txt, current.getName(), ex);
			}

			RULES: for( ColonyRule rule: rules){
				if(rule.apply(current, enemy, mo, mov, mitosis)){
					break RULES;
				}
			}
		}	
		
		if(c1.isDied() || c2.isDied()){
			updateWinner();
			return true;
		}
      
		if(new Random().nextInt(4) > 1)
			agar.moveRandom();
		
		return  false;
!!!142459.java!!!	updateWinner() : void
		if(c1.isDied()){
			oponents.winnerID = oponents.ID2;
			oponents.winner_energy = c2.getEnergy();
		}
		else {
			oponents.winnerID = oponents.ID1;
			oponents.winner_energy = c1.getEnergy();
		}
!!!142587.java!!!	inDish(in x : int, in y : int) : boolean
        return ((x-Defs.RADIUS)*(x-Defs.RADIUS)+ (y-Defs.RADIUS)*(y-Defs.RADIUS)) <
                (Defs.RADIUS*Defs.RADIUS);
!!!142715.java!!!	moveMO(inout a : Point, inout b : Point) : boolean
		if(a == null || b == null ) 
			return false;

		if(microorganism[a.x][a.y] == null)   
			return false;

		if(microorganism[b.x][b.y] != null) 
			return false;

		microorganism[b.x][b.y] = microorganism[a.x][a.y]; 
		microorganism[a.x][a.y] = null; 
		microorganism[b.x][b.y].pos.x = b.x; 
		microorganism[b.x][b.y].pos.y = b.y; 
		return true;
!!!142843.java!!!	killMO(in x : int, in y : int) : boolean
 
   	if(!inDish(x,y) ) {
   		System.out.println("error en killMO de environment: "+ x  + "-" + y);
   		return false;
   	}
		Cell mo = microorganism[x][y];  

		microorganism[x][y] = null; 
		if(mo == null) return false;

		return (mo.id == c1.id) ? c1.kill(mo):c2.kill(mo);
!!!142971.java!!!	createInstance(inout pos : Point, in ene : float, in id : int) : boolean
   	if(pos == null || !inDish(pos.x, pos.y) || 
   		ene <=0 || ene > Defs.E_INITIAL || 
   		microorganism[pos.x][pos.y] != null)
   		return false;
   	    	
   	Cell mo = 	new Cell(id);
      mo.pos.x = pos.x;
      mo.pos.y = pos.y;
      mo.ene = ene;
      
      microorganism[pos.x][pos.y] = mo;

      return id == c1.id ? c1.createInstance(mo) : c2.createInstance(mo);
!!!143099.java!!!	loadSavedBattles(in path : String) : BattleRun
		Vector<BattleRun> result = new Vector<BattleRun>();
		
      FileReader fr = new FileReader(path);
      BufferedReader br = new BufferedReader(fr);
      String line;
      
      while((line = br.readLine()) != null){
      	String [] l = line.split(",");
			try {      	
	      	if(l.length != 3)	 
	      		throw new CreateBattleException("");
	      		
		   	result.addElement(
		   		new BattleRun(	getColonyID(l[0]), 
		   							getColonyID(l[1]), 
		   							agar.getNutrientID(l[2]), 
		   							l[0], l[1], l[2]));
  	         System.out.println("loading: " + line + " [OK]");
		   } catch(CreateBattleException ex){
  	         System.out.println("loading: " + line + " [FAIL]");
		   } 
      }
      
      return result;
!!!143227.java!!!	getAgar() : Agar
        return agar;
!!!143355.java!!!	getFirstOponent() : Colony
		return  c1;
!!!143483.java!!!	getSecondOponent() : Colony
		return  c2;
!!!143611.java!!!	getResults() : BattleRun
		return oponents;
!!!143739.java!!!	getNames() : Vector<String>
      Vector<String> tmp = new Vector<String>();

      for (Colony c: colonies )
         tmp.addElement(c.getName());
      
      return tmp;
!!!143867.java!!!	getOps() : Hashtable<String, Integer>
   	Hashtable<String, Integer> r = new Hashtable<String, Integer>();
   	for(Colony c: colonies){
   		r.put(c.getName(), new Integer(c.id));
   	}
   	
   	return r;
!!!143995.java!!!	getName(in id : int) : String
   	for(Colony c: colonies)
   		if(c.id == id) return c.getName();

   	throw new java.lang.ArrayIndexOutOfBoundsException("cant find id: " + id);
!!!144123.java!!!	getAuthor(in id : int) : String
   	for(Colony c: colonies)
   		if(c.id == id) return c.getAuthor();
   	
   	throw new java.lang.ArrayIndexOutOfBoundsException("cant find id: " + id);
!!!144251.java!!!	getAffiliation(in id : int) : String
   	for(Colony c: colonies)
   		if(c.id == id) return c.getAffiliation();
   	
   	throw new java.lang.ArrayIndexOutOfBoundsException("cant find id: " + id);
!!!144379.java!!!	getColonyID(in col : String) : int
   	for(Colony c: colonies){
   		if(c.getName().toLowerCase().equals(col.toLowerCase())){
   			return c.id;
   		}
   	}
   	return -1;
