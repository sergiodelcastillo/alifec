package alifec.core.persistence.filter;

import alifec.core.persistence.custom.CppMOPredicate;
import org.junit.Assert;
import org.junit.Test;

import java.util.regex.Pattern;


/**
 * Created by Sergio Del Castillo on 26/08/17.
 *
 * @email: sergio.jose.delcastillo@gmail.com
 */
public class SourceCodeFilterTest {
    @Test
    public void testGetNameOfMOCpp() {
        CppMOPredicate predicate = new CppMOPredicate();
        //basic test cases
        String[][] lines = {
                {"\nclass Movx:  public Microorganism{", "Movx"},
                {"\nclass yeyo-01:  public Microorganism{", "yeyo-01"},
                {"\nclass Movx_01:  public Microorganism{", "Movx_01"},
                {"\nclass\n Movx_01\n: \n public \n Microorganism{", "Movx_01"},
                {"import <basdf.h>\nclass Movx_01:  public Microorganism{}", "Movx_01"},
                {"// =======================================================\n" +
                        "// Generated by alifecontest-java application.\n" +
                        "//   @author Sergio Del Castillo\n" +
                        "//   @e-mail:sergiodelcastillo@ymail.com\n" +
                        "// =======================================================\n" +
                        "\n" +
                        "#ifndef MOVX_H\n" +
                        "#define MOVX_H\n" +
                        "\n" +
                        "#include<cstdlib>\n" +
                        "#include <iostream>\n" +
                        "using namespace std;\n" +
                        "\n" +
                        "#include \"Microorganism.h\"\n" +
                        "#include \"Petri.h\"\n" +
                        "\n" +
                        "class Movx: public Microorganism{\n" +
                        "\tpublic:\n" +
                        "\t\tMovx(){\n" +
                        "\t\t\tsrand(time(NULL));\n" +
                        "\t\t}\n" +
                        "\t\tvoid move(Movement &mov) {\n" +
                        "\t\t\tmov.dx = (rand() % 3) -1;\n" +
                        "\t\t\tmov.dy = 0;\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tbool mitosis(){\n" +
                        "\t\t\treturn false;\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getName(){\n" +
                        "\t\t\treturn \"Movx_cpp\";\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getAuthor(){\n" +
                        "\t\t\treturn \"Author\";\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getAffiliation(){\n" +
                        "\t\t\treturn \"UTN-FRSF\";\n" +
                        "\t\t};\n" +
                        "};\n" +
                        "\n" +
                        "#endif\n" +
                        "\n" +
                        "\n", "Movx"}
        };

        for (String[] line : lines) {
            Assert.assertEquals(line[1], predicate.getNameOfMOCpp(line[0]));

        }
    }

    @Test
    public void testInvalidGetNameOfMOCpp() {
        CppMOPredicate predicate = new CppMOPredicate();
        //basic test cases
        String[][] lines = {
                {"\nclass Movx:  public Microorganism{", "Movx"},
                {"\nclass yeyo-01:  public Microorganism{", "yeyo-01"},
                {"\nclass Movx_01:  public Microorganism{", "Movx_01"},
                {"\nclass\n Movx_01\n: \n public \n Microorganism{", "Movx_01"},
                {"import <basdf.h>\nclass Movx_01:  public Microorganism{}", "Movx_01"},
                {"// =======================================================\n" +
                        "// Generated by alifecontest-java application.\n" +
                        "//   @author Sergio Del Castillo\n" +
                        "//   @e-mail:sergiodelcastillo@ymail.com\n" +
                        "// =======================================================\n" +
                        "\n" +
                        "#ifndef MOVX_H\n" +
                        "#define MOVX_H\n" +
                        "\n" +
                        "#include<cstdlib>\n" +
                        "#include <iostream>\n" +
                        "using namespace std;\n" +
                        "\n" +
                        "#include \"Microorganism.h\"\n" +
                        "#include \"Petri.h\"\n" +
                        "\n" +
                        "class Movx: public Microorganism{\n" +
                        "\tpublic:\n" +
                        "\t\tMovx(){\n" +
                        "\t\t\tsrand(time(NULL));\n" +
                        "\t\t}\n" +
                        "\t\tvoid move(Movement &mov) {\n" +
                        "\t\t\tmov.dx = (rand() % 3) -1;\n" +
                        "\t\t\tmov.dy = 0;\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tbool mitosis(){\n" +
                        "\t\t\treturn false;\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getName(){\n" +
                        "\t\t\treturn \"Movx_cpp\";\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getAuthor(){\n" +
                        "\t\t\treturn \"Author\";\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getAffiliation(){\n" +
                        "\t\t\treturn \"UTN-FRSF\";\n" +
                        "\t\t};\n" +
                        "};\n" +
                        "\n" +
                        "#endif\n" +
                        "\n" +
                        "\n", "Movx"}
        };


        for (String[] line : lines) {
            Assert.assertEquals(line[1], predicate.getNameOfMOCpp(line[0]));

        }
    }

    @Test
    public void testRemoveLineComments() {
        CppMOPredicate predicate = new CppMOPredicate();
        String[][] lines = {
                {"//class\n Movx:  public Microorganism{", "\n Movx:  public Microorganism{"},
                {"//aa\nasfasf \n//bbb\n", "\nasfasf \n\n"},
                {"\naa\nasfasf \n//bbb\nasdfa\n", "\naa\nasfasf \n\nasdfa\n"},
                {"// =======================================================\n" +
                        "// Generated by alifecontest-java application.\n" +
                        "//   @author Sergio Del Castillo\n" +
                        "//   @e-mail:sergiodelcastillo@ymail.com\n" +
                        "// =======================================================\n" +
                        "\n" +
                        "#ifndef MOVX_H\n" +
                        "#define MOVX_H\n" +
                        "\n" +
                        "#include<cstdlib>\n" +
                        "#include <iostream>\n" +
                        "using namespace std;\n" +
                        "\n" +
                        "#include \"Microorganism.h\"\n" +
                        "#include \"Petri.h\"\n" +
                        "\n" +
                        "class Movx: public Microorganism{\n" +
                        "\tpublic:\n" +
                        "\t\tMovx(){\n" +
                        "\t\t//\tsrand(time(NULL));\n" +
                        "\t\t}\n" +
                        "\t\tvoid move(Movement &mov) {\n" +
                        "\t\t\tmov.dx = (rand() % 3) -1;\n" +
                        "\t\t\tmov.dy = 0;\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tbool mitosis(){\n" +
                        "\t\t\treturn false;\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getName(){\n" +
                        "\t\t\treturn \"Movx_cpp\";\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getAuthor(){\n" +
                        "\t\t\treturn \"Author\";\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tstring getAffiliation(){\n" +
                        "\t\t\treturn \"UTN-FRSF\";\n" +
                        "\t\t};\n" +
                        "};\n" +
                        "\n" +
                        "#endif\n\n",
                        "\n\n\n\n\n\n#ifndef MOVX_H\n" +
                                "#define MOVX_H\n" +
                                "\n" +
                                "#include<cstdlib>\n" +
                                "#include <iostream>\n" +
                                "using namespace std;\n" +
                                "\n" +
                                "#include \"Microorganism.h\"\n" +
                                "#include \"Petri.h\"\n" +
                                "\n" +
                                "class Movx: public Microorganism{\n" +
                                "\tpublic:\n" +
                                "\t\tMovx(){\n" +
                                "\t\t\n" +
                                "\t\t}\n" +
                                "\t\tvoid move(Movement &mov) {\n" +
                                "\t\t\tmov.dx = (rand() % 3) -1;\n" +
                                "\t\t\tmov.dy = 0;\n" +
                                "\t\t};\n" +
                                "\n" +
                                "\t\tbool mitosis(){\n" +
                                "\t\t\treturn false;\n" +
                                "\t\t};\n" +
                                "\n" +
                                "\t\tstring getName(){\n" +
                                "\t\t\treturn \"Movx_cpp\";\n" +
                                "\t\t};\n" +
                                "\n" +
                                "\t\tstring getAuthor(){\n" +
                                "\t\t\treturn \"Author\";\n" +
                                "\t\t};\n" +
                                "\n" +
                                "\t\tstring getAffiliation(){\n" +
                                "\t\t\treturn \"UTN-FRSF\";\n" +
                                "\t\t};\n" +
                                "};\n" +
                                "\n" +
                                "#endif\n" +
                                "\n"}

        };

        for (String[] line : lines) {
            Assert.assertEquals(line[1], predicate.removeComments(line[0]));
        }
    }

    @Test
    public void testRemoveComments1() {
        CppMOPredicate predicate = new CppMOPredicate();
        String[][] lines = {
                {"/*first test*/\n" +
                        "/* =======================================================\n" +
                        //   "// Generated by alifecontest-java application.\n" +
                        // "//   @author Sergio Del Castillo\n" +
                        // "//   @e-mail:sergiodelcastillo@ymail.com\n" +
                        " =======================================================*/\n" +
                        "\n" +
                        "#ifndef MOVX_H\n" +
                        "#define MOVX_H\n" +
                        "\n" +
                        "#include<cstdlib>\n" +
                        "#include <iostream>\n" +
                        "using namespace std;\n" +
                        "\n" +
                        "#include \"Microorganism.h\"\n" +
                        "#include \"Petri.h\"\n" +
                        "\n" +
                        "class Movx: /*This comment will be deleted*/public Microorganism{\n" +
                        "\tpublic:\n" +
                        "\t\tMovx(){\n" +
                        "\t\t//\tsrand(time(NULL));\n" +
                        "\t\t}\n" +
                        "\t\tvoid move(Movement &mov) /*This comment will be deleted*/{\n" +
                        "\t\t\tmov.dx = (rand() % 3) -1;\n" +
                        "\t\t\tmov.dy = 0;\n" +
                        "\t\t};\n" +
                        "\n" +
                        "\t\tbool mitosis(){\n" +
                        "\t\t\treturn false;\n" +
                        "\t\t}; \n" +
                        "/*This comment will be deleted*/\n" +
                        "\n" +
                        "\t\tstring getName(){\n" +
                        "\t\t\treturn \"Movx_cpp\";\n" +
                        "\t\t};\n" +
                        "/* \n" +
                        "This comment will be deleted\n" +
                        "*/\n" +
                        "\t\tstring getAuthor(){\n" +
                        "\t\t\treturn \"Author\";\n" +
                        "\t\t};\n" +
                        "/* This comment will be deleted\n" +
                        "*/\n" +
                        "\t\tstring getAffiliation(){\n" +
                        "\t\t\treturn \"UTN-FRSF\";\n" +
                        "\t\t};\n" +
                        "};\n" +
                        "\n" +
                        "#endif\n",
                        "\n" + "\n" + "\n" +
                                "#ifndef MOVX_H\n" +
                                "#define MOVX_H\n" +
                                "\n" +
                                "#include<cstdlib>\n" +
                                "#include <iostream>\n" +
                                "using namespace std;\n" +
                                "\n" +
                                "#include \"Microorganism.h\"\n" +
                                "#include \"Petri.h\"\n" +
                                "\n" +
                                "class Movx: public Microorganism{\n" +
                                "\tpublic:\n" +
                                "\t\tMovx(){\n" +
                                "\t\t\n" +
                                "\t\t}\n" +
                                "\t\tvoid move(Movement &mov) {\n" +
                                "\t\t\tmov.dx = (rand() % 3) -1;\n" +
                                "\t\t\tmov.dy = 0;\n" +
                                "\t\t};\n" +
                                "\n" +
                                "\t\tbool mitosis(){\n" +
                                "\t\t\treturn false;\n" +
                                "\t\t}; \n" +
                                "\n" +
                                "\n" +
                                "\t\tstring getName(){\n" +
                                "\t\t\treturn \"Movx_cpp\";\n" +
                                "\t\t};\n" +
                                "\n" +
                                "\t\tstring getAuthor(){\n" +
                                "\t\t\treturn \"Author\";\n" +
                                "\t\t};\n" +
                                "\n" +
                                "\t\tstring getAffiliation(){\n" +
                                "\t\t\treturn \"UTN-FRSF\";\n" +
                                "\t\t};\n" +
                                "};\n" +
                                "\n" +
                                "#endif\n"}

        };

        for (String[] line : lines) {
            String out = predicate.removeComments(line[0]);

            Assert.assertEquals(line[1], out);
        }

    }

    //@TODO: Implement this option
    // @Test
    //The current implementation does not covers this option
    public void testUnsupportedWrongComment() {
        CppMOPredicate predicate = new CppMOPredicate();
        String lineSource = "someString = \"An example comment: /* example */";
        String lineExpected = "someString = \"An example comment: /* example */";

        Assert.assertEquals(lineExpected, predicate.removeComments(lineSource));

    }

    @Test
    public void testMixed() {
        CppMOPredicate predicate = new CppMOPredicate();
        String source = "// /* \nsome_code();\n// */";
        String target = "\nsome_code();\n";

        Assert.assertEquals(target, predicate.removeComments(source));
    }

    @Test
    public void commentBlock1() {
        CppMOPredicate predicate = new CppMOPredicate();
        String source = "/* First comment\nfirst comment—line two*/";
        String target = "";
        Assert.assertEquals(target, predicate.removeComments(source));
    }

    @Test
    public void commentBlock2() {
        CppMOPredicate predicate = new CppMOPredicate();
        String source = "/* Second comment */";
        String target = "";
        Assert.assertEquals(target, predicate.removeComments(source));
    }

    @Test
    public void commentBlock3() {
        CppMOPredicate predicate = new CppMOPredicate();
        String source = "start_code();\n/* First comment */\nmore_code();\n/* Second comment */\nend_code();";
        String target = "start_code();\n\nmore_code();\n\nend_code();";
        Assert.assertEquals(target, predicate.removeComments(source));
    }

    @Test
    public void commentBlock4() {
        CppMOPredicate predicate = new CppMOPredicate();
        String source = "/*\n* Common multi-line comment style.\n*/\n/* Second comment */\n";
        String target = "\n\n";
        Assert.assertEquals(target, predicate.removeComments(source));
    }

    @Test
    public void commentBlock5() {
        CppMOPredicate predicate = new CppMOPredicate();
        String source = "start_code();\n/****\n * Common multi-line comment style.\n ****/\n        more_code();\n/*\n * Another common multi-line comment style.\n */\n        end_code();";
        String target = "start_code();\n\n        more_code();\n\n        end_code();";
        Assert.assertEquals(target, predicate.removeComments(source));
    }

    @Test
    public void testall(){
        //@Todo: agregar los test faltantes para completar toda la clase
    }
}
